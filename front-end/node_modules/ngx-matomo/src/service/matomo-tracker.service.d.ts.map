{"version":3,"file":"matomo-tracker.service.d.ts","sources":["matomo-tracker.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Wrapper for functions available for the Matomo Javascript tracker.\n *\n * @export\n */\nexport declare class MatomoTracker {\n    /**\n     * Creates an instance of MatomoTracker.\n     *\n     * @memberof MatomoTracker\n     */\n    constructor();\n    /**\n     * Logs an event with an event category (Videos, Music, Games...), an event action (Play, Pause, Duration,\n     * Add Playlist, Downloaded, Clicked...), and an optional event name and optional numeric value.\n     *\n     * @param category\n     * @param action\n     * @param [name]\n     * @param [value]\n     * @memberof MatomoTracker\n     */\n    trackEvent(category: string, action: string, name?: string, value?: number): void;\n    /**\n     * Logs a visit to this page.\n     *\n     * @param [customTitle]\n     * @memberof MatomoTracker\n     */\n    trackPageView(customTitle?: string): void;\n    /**\n     * Logs an internal site search for a specific keyword, in an optional category,\n     * specifying the optional count of search results in the page.\n     *\n     * @param keyword\n     * @param [category]\n     * @param [resultsCount]\n     * @memberof MatomoTracker\n     */\n    trackSiteSearch(keyword: string, category?: string, resultsCount?: number): void;\n    /**\n     * Manually logs a conversion for the numeric goal ID, with an optional numeric custom revenue customRevenue.\n     *\n     * @param idGoal\n     * @param [customRevenue]\n     * @memberof MatomoTracker\n     */\n    trackGoal(idGoal: number, customRevenue?: number): void;\n    /**\n     * Manually logs a click from your own code.\n     *\n     * @param url: is the full URL which is to be tracked as a click.\n     * @param linkType: can either be 'link' for an outlink or 'download' for a download.\n     * @memberof MatomoTracker\n     */\n    trackLink(url: string, linkType: string): void;\n    /**\n     * Scans the entire DOM for all content blocks and tracks all impressions once the DOM ready event has been triggered.\n     *\n     * @memberof MatomoTracker\n     */\n    trackAllContentImpressions(): void;\n    /**\n     * Scans the entire DOM for all content blocks as soon as the page is loaded.\n     * It tracks an impression only if a content block is actually visible.\n     *\n     * @param checkOnScroll\n     * @param timeIntervalInMs\n     * @memberof MatomoTracker\n     */\n    trackVisibleContentImpressions(checkOnScroll: boolean, timeIntervalInMs: number): void;\n    /**\n     * Scans the given DOM node and its children for content blocks and tracks an impression for them\n     * if no impression was already tracked for it.\n     *\n     * @param domNode\n     * @memberof MatomoTracker\n     */\n    trackContentImpressionsWithinNode(domNode: Node): void;\n    /**\n     * Tracks an interaction with the given DOM node / content block.\n     *\n     * @param domNode\n     * @param contentInteraction\n     * @memberof MatomoTracker\n     */\n    trackContentInteractionNode(domNode: Node, contentInteraction: string): void;\n    /**\n     * Tracks a content impression using the specified values.\n     *\n     * @param contentName\n     * @param contentPiece\n     * @param contentTarget\n     * @memberof MatomoTracker\n     */\n    trackContentImpression(contentName: string, contentPiece: string, contentTarget: string): void;\n    /**\n     * Tracks a content interaction using the specified values.\n     *\n     * @param contentInteraction\n     * @param contentName\n     * @param contentPiece\n     * @param contentTarget\n     * @memberof MatomoTracker\n     */\n    trackContentInteraction(contentInteraction: string, contentName: string, contentPiece: string, contentTarget: string): void;\n    /**\n     * Logs all found content blocks within a page to the console. This is useful to debug / test content tracking.\n     *\n     * @memberof MatomoTracker\n     */\n    logAllContentBlocksOnPage(): void;\n    /**\n     * Installs link tracking on all applicable link elements.\n     * Set the enable parameter to true to use pseudo click-handler (treat middle click and open contextmenu as left click).\n     * A right click (or any click that opens the context menu) on a link will be tracked as clicked even if \"Open in new tab\"\n     * is not selected. If \"false\" (default), nothing will be tracked on open context menu or middle click.\n     *\n     * @param enable\n     * @memberof MatomoTracker\n     */\n    enableLinkTracking(enable: boolean): void;\n    /**\n     * Install a Heart beat timer that will regularly send requests to Matomo in order to better measure the time spent on the page.\n     * These requests will be sent only when the user is actively viewing the page( when the tab is active and in focus).\n     * These requests will not track additional actions or pageviews.\n     * By default, delayInSeconds is set to 15 seconds.\n     *\n     * @param delayInSeconds\n     * @memberof MatomoTracker\n     */\n    enableHeartBeatTimer(delayInSeconds: number): void;\n    /**\n     * Enables cross domain linking. By default, the visitor ID that identifies a unique visitor is stored in the browser's\n     * first party cookies. This means the cookie can only be accessed by pages on the same domain. If you own multiple domains and\n     * would like to track all the actions and pageviews of a specific visitor into the same visit, you may enable cross domain\n     * linking (learn more) . Whenever a user clicks on a link it will append a URL parameter pk_vid to the clicked URL which forwards\n     * the current visitor ID value to the page of the different domain.\n     *\n     * @memberof MatomoTracker\n     */\n    enableCrossDomainLinking(): void;\n    /**\n     * By default, the two visits across domains will be linked together when the link is clicked and the page is loaded within\n     * a 180 seconds timeout window.\n     *\n     * @param timeout\n     * @memberof MatomoTracker\n     */\n    setCrossDomainLinkingTimeout(timeout: number): void;\n    /**\n     * Overrides document.title\n     *\n     * @param title\n     * @memberof MatomoTracker\n     */\n    setDocumentTitle(title: string): void;\n    /**\n     * Sets array of hostnames or domains to be treated as local.\n     * For wildcard subdomains, you can use: setDomains('.example.com'); or setDomains('*.example.com');.\n     * You can also specify a path along a domain: setDomains('*.example.com/subsite1');\n     *\n     * @param domains\n     * @memberof MatomoTracker\n     */\n    setDomains(domains: string[]): void;\n    /**\n     * Override the page's reported URL.\n     *\n     * @param url\n     * @memberof MatomoTracker\n     */\n    setCustomUrl(url: string): void;\n    /**\n     * Overrides the detected Http-Referer.\n     *\n     * @param url\n     * @memberof MatomoTracker\n     */\n    setReferrerUrl(url: string): void;\n    /**\n     * Specifies the website ID.\n     * Redundant: can be specified in getTracker() constructor.\n     *\n     * @param siteId\n     * @memberof MatomoTracker\n     */\n    setSiteId(siteId: number): void;\n    /**\n     * Specify the Matomo HTTP API URL endpoint. Points to the root directory of piwik,\n     * e.g. http://piwik.example.org/ or https://example.org/piwik/.\n     * This function is only useful when the 'Overlay' report is not working.\n     * By default, you do not need to use this function.\n     *\n     * @param url\n     * @memberof MatomoTracker\n     */\n    setApiUrl(url: string): void;\n    /**\n     * Specifies the Matomo server URL.\n     * Redundant: can be specified in getTracker() constructor.\n     *\n     * @param url\n     * @memberof MatomoTracker\n     */\n    setTrackerUrl(url: string): void;\n    /**\n     * Returns the Matomo server URL.\n     *\n     * @memberof MatomoTracker\n     */\n    getPiwikUrl(): Promise<string>;\n    /**\n     * Returns the current url of the page that is currently being visited.\n     * If a custom URL was set before calling this method, the custom URL will be returned.\n     *\n     * @memberof MatomoTracker\n     */\n    getCurrentUrl(): Promise<string>;\n    /**\n     * Sets classes to be treated as downloads (in addition to piwik_download).\n     *\n     * @param classes\n     * @memberof MatomoTracker\n     */\n    setDownloadClasses(classes: string | string[]): void;\n    /**\n     * Sets list of file extensions to be recognized as downloads.\n     * Example: 'doc' or['doc', 'xls'].\n     *\n     * @param extensions\n     * @memberof MatomoTracker\n     */\n    setDownloadExtensions(extensions: string | string[]): void;\n    /**\n     * Sets additional file extensions to be recognized as downloads.\n     * Example: 'doc' or['doc', 'xls'].\n     *\n     * @param extensions\n     * @memberof MatomoTracker\n     */\n    addDownloadExtensions(extensions: string | string[]): void;\n    /**\n     * Sets file extensions to be removed from the list of download file extensions.\n     * Example: 'doc' or['doc', 'xls'].\n     *\n     * @param extensions\n     * @memberof MatomoTracker\n     */\n    removeDownloadExtensions(extensions: string | string[]): void;\n    /**\n     * Sets classes to be ignored if present in link (in addition to piwik_ignore).\n     *\n     * @param classes\n     * @memberof MatomoTracker\n     */\n    setIgnoreClasses(classes: string | string[]): void;\n    /**\n     * Set classes to be treated as outlinks (in addition to piwik_link).\n     *\n     * @param classes\n     * @memberof MatomoTracker\n     */\n    setLinkClasses(classes: string | string[]): void;\n    /**\n     * Set delay for link tracking (in milliseconds).\n     *\n     * @param delay\n     * @memberof MatomoTracker\n     */\n    setLinkTrackingTimer(delay: number): void;\n    /**\n     * Returns delay for link tracking (in milliseconds).\n     *\n     * @memberof MatomoTracker\n     */\n    getLinkTrackingTimer(): Promise<number>;\n    /**\n     * Set to true to not record the hash tag (anchor) portion of URLs\n     *\n     * @param value\n     * @memberof MatomoTracker\n     */\n    discardHashTag(value: boolean): void;\n    /**\n     * By default Matomo uses the browser DOM Timing API to accurately determine the time it takes to generate and download\n     * the page. You may overwrite the value by specifying a milliseconds value here.\n     *\n     * @param generationTime\n     * @memberof MatomoTracker\n     */\n    setGenerationTimeMs(generationTime: number): void;\n    /**\n     * Appends a custom string to the end of the HTTP request to piwik.php?\n     *\n     * @param appendToUrl\n     * @memberof MatomoTracker\n     */\n    appendToTrackingUrl(appendToUrl: string): void;\n    /**\n     * Set to true to not track users who opt out of tracking using Mozilla's (proposed) Do Not Track setting.\n     *\n     * @param doNotTrack\n     * @memberof MatomoTracker\n     */\n    setDoNotTrack(doNotTrack: boolean): void;\n    /**\n     * Enables a frame-buster to prevent the tracked web page from being framed/iframed.\n     *\n     * @memberof MatomoTracker\n     */\n    killFrame(): void;\n    /**\n     * Forces the browser load the live URL if the tracked web page is loaded from a local file (e.g., saved to someone's desktop).\n     *\n     * @param url\n     * @memberof MatomoTracker\n     */\n    redirectFile(url: string): void;\n    /**\n     * Records how long the page has been viewed if the minimumVisitLength (in seconds) is attained;\n     * the heartBeatDelay determines how frequently to update the server\n     *\n     * @param minimumVisitLength\n     * @param heartBeatDelay\n     * @memberof MatomoTracker\n     */\n    setHeartBeatTimer(minimumVisitLength: number, heartBeatDelay: number): void;\n    /**\n     * Returns the 16 characters ID for the visitor\n     *\n     * @memberof MatomoTracker\n     */\n    getVisitorId(): Promise<string>;\n    /**\n     * Returns the visitor cookie contents in an array\n     *\n     * @memberof MatomoTracker\n     */\n    getVisitorInfo(): Promise<any[]>;\n    /**\n     * Returns the visitor attribution array (Referer information and / or Campaign name & keyword).\n     * Attribution information is used by Matomo to credit the correct referrer (first or last referrer)\n     * used when a user triggers a goal conversion.\n     *\n     * @memberof MatomoTracker\n     */\n    getAttributionInfo(): Promise<any[]>;\n    /**\n     * Returns the attribution campaign name.\n     *\n     * @memberof MatomoTracker\n     */\n    getAttributionCampaignName(): Promise<string>;\n    /**\n     * Returns the attribution campaign keyword.\n     *\n     * @memberof MatomoTracker\n     */\n    getAttributionCampaignKeyword(): Promise<string>;\n    /**\n     * Returns the attribution referrer timestamp.\n     *\n     * @memberof MatomoTracker\n     */\n    getAttributionReferrerTimestamp(): Promise<string>;\n    /**\n     * Returns the attribution referrer URL.\n     *\n     * @memberof MatomoTracker\n     */\n    getAttributionReferrerUrl(): Promise<string>;\n    /**\n     *  Returns the User ID string if it was set.\n     *\n     * @memberof MatomoTracker\n     */\n    getUserId(): Promise<string>;\n    /**\n     * Sets a User ID to this user (such as an email address or a username).\n     *\n     * @param userId\n     * @memberof MatomoTracker\n     */\n    setUserId(userId: string): void;\n    /**\n     * Resets the User ID which also generates a new Visitor ID.\n     *\n     * @memberof MatomoTracker\n     */\n    resetUserId(): void;\n    /**\n     * Sets a custom variable.\n     *\n     * @param index: Index, the number from 1 to 5 where this custom variable name is stored for the current page view\n     * @param name: Name, the name of the variable, for example: Category, Sub-category, UserType\n     * @param value: Value, for example: \"Sports\", \"News\", \"World\", \"Business\", etc.\n     * @param scope: Scope of the custom variable, \"page\" means the custom variable applies to the current page view\n     * @memberof MatomoTracker\n     */\n    setCustomVariable(index: number, name: string, value: string, scope: string): void;\n    /**\n     * Deletes a custom variable.\n     *\n     * @param index\n     * @param scope\n     * @memberof MatomoTracker\n     */\n    deleteCustomVariable(index: number, scope: string): void;\n    /**\n     * Retrieves a custom variable.\n     *\n     * @param index\n     * @param scope\n     * @memberof MatomoTracker\n     */\n    getCustomVariable(index: number, scope: string): Promise<string>;\n    /**\n     * When called then the Custom Variables of scope \"visit\" will be stored (persisted) in a first party cookie\n     * for the duration of the visit. This is useful if you want to call getCustomVariable later in the visit.\n     * (by default custom variables are not stored on the visitor's computer.)\n     *\n     * @memberof MatomoTracker\n     */\n    storeCustomVariablesInCookie(): void;\n    /**\n     * Sets a custom dimension.\n     * (requires Matomo 2.15.1 + Custom Dimensions plugin)\n     *\n     * @param customDimensionId\n     * @param customDimensionValue\n     * @memberof MatomoTracker\n     */\n    setCustomDimension(customDimensionId: number, customDimensionValue: string): void;\n    /**\n     * Deletes a custom dimension.\n     * (requires Matomo 2.15.1 + Custom Dimensions plugin)\n     *\n     * @param customDimensionId\n     * @memberof MatomoTracker\n     */\n    deleteCustomDimension(customDimensionId: number): void;\n    /**\n     * Retrieve a custom dimension.\n     * (requires Matomo 2.15.1 + Custom Dimensions plugin)\n     *\n     * @param customDimensionId\n     * @memberof MatomoTracker\n     */\n    getCustomDimension(customDimensionId: number): Promise<string>;\n    /**\n     * Sets campaign name parameter(s).\n     *\n     * @param name\n     * @memberof MatomoTracker\n     */\n    setCampaignNameKey(name: string): void;\n    /**\n     * Sets campaign keyword parameter(s).\n     *\n     * @param keyword\n     * @memberof MatomoTracker\n     */\n    setCampaignKeywordKey(keyword: string): void;\n    /**\n     * Set to true to attribute a conversion to the first referrer.\n     * By default, conversion is attributed to the most recent referrer.\n     *\n     * @param conversionToFirstReferrer\n     * @memberof MatomoTracker\n     */\n    setConversionAttributionFirstReferrer(conversionToFirstReferrer: boolean): void;\n    /**\n     * Sets the current page view as a product or category page view.\n     * When you call setEcommerceView it must be followed by a call to trackPageView to record the product or category page view.\n     *\n     * @param productSKU\n     * @param productName\n     * @param categoryName\n     * @param price\n     * @memberof MatomoTracker\n     */\n    setEcommerceView(productSKU: string, productName: string, categoryName: string, price: number): void;\n    /**\n     * Adds a product into the ecommerce order.Must be called for each product in the order.\n     *\n     * @param productSKU\n     * @param [productName]\n     * @param [productCategory]\n     * @param [price]\n     * @param [quantity]\n     * @memberof MatomoTracker\n     */\n    addEcommerceItem(productSKU: string, productName?: string, productCategory?: string, price?: number, quantity?: number): void;\n    /**\n     * Tracks a shopping cart.Call this javascript function every time a user is adding, updating or deleting a product from the cart.\n     *\n     * @param grandTotal\n     * @memberof MatomoTracker\n     */\n    trackEcommerceCartUpdate(grandTotal: number): void;\n    /**\n     * Tracks an Ecommerce order, including any ecommerce item previously added to the order.\n     * orderId and grandTotal (ie.revenue) are required parameters.\n     *\n     * @param orderId\n     * @param grandTotal\n     * @param [subTotal]\n     * @param [tax]\n     * @param [shipping]\n     * @param [discount]\n     * @memberof MatomoTracker\n     */\n    trackEcommerceOrder(orderId: string, grandTotal: number, subTotal?: number, tax?: number, shipping?: number, discount?: number): void;\n    /**\n     * Disables all first party cookies. Existing Matomo cookies for this websites will be deleted on the next page view.\n     *\n     * @memberof MatomoTracker\n     */\n    disableCookies(): void;\n    /**\n     * Deletes the tracking cookies currently set (useful when creating new visits).\n     *\n     * @memberof MatomoTracker\n     */\n    deleteCookies(): void;\n    /**\n     * Returns whether cookies are enabled and supported by this browser.\n     *\n     * @memberof MatomoTracker\n     */\n    hasCookies(): Promise<boolean>;\n    /**\n     * Sets the tracking cookie name prefix.\n     * Default prefix is 'pk'.\n     *\n     * @param prefix\n     * @memberof MatomoTracker\n     */\n    setCookieNamePrefix(prefix: string): void;\n    /**\n     * Sets the domain of the tracking cookies.\n     * Default is the document domain.\n     * If your website can be visited at both www.example.com and example.com, you would use: '.example.com' or '*.example.com'.\n     *\n     * @param domain\n     * @memberof MatomoTracker\n     */\n    setCookieDomain(domain: string): void;\n    /**\n     * Sets the path of the tracking cookies.\n     * Default is '/'.\n     *\n     * @param path\n     * @memberof MatomoTracker\n     */\n    setCookiePath(path: string): void;\n    /**\n     * Set to true to enable the Secure cookie flag on all first party cookies.This should be used when your website is only available\n     * under HTTPS so that all tracking cookies are always sent over secure connection.\n     *\n     * @param secure\n     * @memberof MatomoTracker\n     */\n    setSecureCookie(secure: boolean): void;\n    /**\n     * Sets the visitor cookie timeout.\n     * Default is 13 months.\n     *\n     * @param seconds\n     * @memberof MatomoTracker\n     */\n    setVisitorCookieTimeout(seconds: number): void;\n    /**\n     * Sets the referral cookie timeout.\n     * Default is 6 months.\n     *\n     * @param seconds\n     * @memberof MatomoTracker\n     */\n    setReferralCookieTimeout(seconds: number): void;\n    /**\n     * Sets the session cookie timeout.\n     * Default is 30 minutes.\n     *\n     * @param seconds\n     * @memberof MatomoTracker\n     */\n    setSessionCookieTimeout(seconds: number): void;\n    /**\n     *  Adds a click listener to a specific link element. When clicked, Matomo will log the click automatically.\n     *\n     * @param element\n     * @memberof MatomoTracker\n     */\n    addListener(element: Element): void;\n    /**\n     * Sets the request method to either \"GET\" or \"POST\". (The default is \"GET\".)\n     * To use the POST request method, either:\n     * 1) the Matomo host is the same as the tracked website host (Matomo installed in the same domain as your tracked website), or\n     * 2) if Matomo is not installed on the same host as your website, you need to enable CORS (Cross domain requests).\n     *\n     * @param method\n     * @memberof MatomoTracker\n     */\n    setRequestMethod(method: string): void;\n    /**\n     * Sets a function that will process the request content.\n     * The function will be called once the request (query parameters string) has been prepared, and before the request content is sent.\n     *\n     * @param callback\n     * @memberof MatomoTracker\n     */\n    setCustomRequestProcessing(callback: (queryParameters: string) => void): void;\n    /**\n     * Sets request Content-Type header value.\n     * Applicable when \"POST\" request method is used via setRequestMethod.\n     *\n     * @param contentType\n     * @memberof MatomoTracker\n     */\n    setRequestContentType(contentType: string): void;\n}\n"]}